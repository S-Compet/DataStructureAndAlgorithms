// https://leetcode.com/problems/compare-version-numbers/description/

class Solution {
    fun compareVersion(version1: String, version2: String): Int {
        val split1 = version1.split(".").toMutableList()
        val split2 = version2.split(".").toMutableList()

        makeListSizeEqual(split1, split2)
        makeLengthEqual(split1, split2)
// println(split1)
// println(split2)
        for (i in 0 until split1.size) {
            for (j in 0 until split1[i].length) {
                if (split1[i][j] < split2[i][j]) {
                    return -1
                } else if (split1[i][j] > split2[i][j]) {
                    return 1
                }
            }
        }
        return 0
    }

    private fun makeListSizeEqual(split1: MutableList<String>, split2: MutableList<String>) {
        val maxSize = Math.max(split1.size, split2.size)
        
        val diff1 = maxSize - split1.size
        for (index in 1 .. diff1) {
            split1.add("")
        }

        val diff2 = maxSize - split2.size
        for (index in 1 .. diff2) {
            split2.add("")
        }
    }

    private fun makeLengthEqual(split1: MutableList<String>, split2: MutableList<String>) {
        // leading number
        makeLeadingEqual(split1, split2)

        // remaining number
        makeRemainingEqual(split1, split2)
    }

    private fun makeLeadingEqual(split1: MutableList<String>, split2: MutableList<String>) {
        val small: MutableList<String>
        val large: MutableList<String>
        if (split1[0].length < split2[0].length) {
            small = split1
            large = split2
        } else {
            small = split2
            large = split1
        }
        val diff = large[0].length - small[0].length
        var str = small[0]
        for (index in 1 .. diff) {
            str = "0$str"
        }
        small[0] = str
    }

    private fun makeRemainingEqual(split1: MutableList<String>, split2: MutableList<String>) {
        for (i in 1 until split1.size) {
            val small: MutableList<String>
            val large: MutableList<String>

            if (split1[i].length < split2[i].length) {
                small = split1
                large = split2
            } else {
                small = split2
                large = split1
            }

            val diff = large[i].length - small[i].length
            var str = small[i]
            for (index in 1 .. diff) {
                str = "0$str"
                // str = "${str}0"
            }
            small[i] = str
        }
    }
}
