// https://leetcode.com/problems/interleaving-string/description/

class Solution {
    fun isInterleave(s1: String, s2: String, s3: String): Boolean {
        val m = s1.length
        val n = s2.length

        if (m + n != s3.length) return false

        val table = Array<BooleanArray>(m + 1) { BooleanArray(n + 1) { false } }

        for (i in 0 .. m) {
            for (j in 0 .. n) {
                if (i == 0 && j == 0) {
                    table[i][j] = true
                } else if (i == 0) {
                    table[i][j] = table[i][j - 1] && s2[j - 1] == s3[i + j - 1]
                } else if (j == 0) {
                    table[i][j] = table[i - 1][j] && s1[i - 1] == s3[i + j - 1]
                } else {
                    table[i][j] = 
                        (table[i][j - 1] && s2[j - 1] == s3[i + j - 1]) || 
                        (table[i - 1][j] && s1[i - 1] == s3[i + j - 1])
                }
            }
        }
        return return table[m][n]
    }

    fun recursion(s1: String, s2: String, s3: String): Boolean {
        // println("s1:$s1   s2:$s2   s3:$s3")
        if (s1.isEmpty() && s2.isEmpty() && s3.isEmpty()) return true

        if (s3.isEmpty()) return false

        if (s1.isNotEmpty() && s2.isNotEmpty() && s1[0] == s3[0] && s2[0] == s3[0]) {
            return recursion(s1.substring(1), s2, s3.substring(1)) || recursion(s1, s2.substring(1), s3.substring(1))
        } else if (s1.isNotEmpty() && s1[0] == s3[0]) {
            return recursion(s1.substring(1), s2, s3.substring(1))
        } else if (s2.isNotEmpty() && s2[0] == s3[0]) {
            return recursion(s1, s2.substring(1), s3.substring(1))
        } else {
            return false
        }
    }
}
