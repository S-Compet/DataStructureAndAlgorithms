/**
* APPROACH
	1,2,3,4

	[1] [2] [3] [4]
	[1,2], [1.3], [1,4]
	[2,3], [2,4]
	[3,4]
	[1,2,3], [1,2,4], [1,3,4], [2,3,4]
	[1,2,3,4]




* PSEUDO CODE
	
	RECURSIVE

main() {
R(index=-1, Array=[1,2,3,4], Path=[], Solution=[])

Return Solution
}

R(index, Array, Path, Solution) {
	Solution.push(Path)
	For (i in index + 1 until Array.size)
		R(i, Array, Path + Array[i], Solution)
}
	




* COMPLEXITY
	RECURSIVE
		time -> O(2^n - 1) -> O(2^n)
		space -> 2^n * n
				nC1 * 1 + nC2 * 2 + nC3 * 3 …… + nCn * n
				nC1 * (n-3) + nC2 * (n-2) + nC3 * (n-1) …… + nCn * (n)
													
n * (nC1 + nC2 + nC3 + nCn) - (nC1 * 3 + nC2 * 2 + nC3 * 1 …… + 1)
n * 2^n - 2^n => O(n * 2^n)

https://www.doubtnut.com/qna/642830361


* LAST REVISION DATE




*/


//CODE

fun main() {
	val arr = intArrayOf(1,2,3,4)
	val solutions = mutableListOf<List<Int>>()
	recursion(-1, arr, mutableListOf<Int>(), solutions)

	println(solutions)
}

fun recursion(index: Int, arr: IntArray, path: List<Int>, solutions: MutableList<List<Int>>) {
	solutions.add(path)
	for (i in index + 1 until arr.size) {
		recursion(i, arr, path + arr[i], solutions)
	}
}

operator fun List<Int>.plus(value: Int): List<Int> {
	return this.toMutableList().apply{ add(value) }
}

